library seamonkey

module checked

import seamonkey::any
import checked::Checked

label main: Function(arguments: mutable Vector<String>) := {

    label print_help := {
        print_line?("usage:")
        print_line?("   $   seamonkey [options]")
        print_line?("options:")
        print_line?("  -h   show help menu")
        print_line?("  -a   pass compiler arguments")
        print_line?("  -d   set working directory")
        print_line?("  -p   change project file")
        print_line?("contact:")
        print_line?("   #   github.com/ve5li/seamonkey")
        print_line?("   @   ve5li@tuta.io")
    }

    initialize_time()

    label working_directory := mutable Checked::none("working directory")
    label project_file := mutable Checked::Some("project file", "compiler.data")
    label show_help := mutable false

    arguments.remove(1)
    while arguments.is_filled() {
        match arguments.remove(1) {
            case "-a" -> break
            case "-h" -> show_help := mutable true
            case "-d" -> display?(working_directory.update(&arguments))
            case "-p" -> display?(project_file.update(&arguments))
            case any: invalid -> display?(error?(string?("unknown flag {}", invalid)))
        }
    }

    if show_help {
        print_help()
        terminate
    }

    if case Some: working_directory == working_directory.changed() {
        if case Error == set_working_directory($working_directory) {
            label message := format?("failed to set working directory {}", working_directory)
            display?(error!(message))
        }
    }

    label parameters := arguments.iterator().map({ string?(item) }).collect()
    label project_file := project_file.unpack()
    label root := display?(read_map($SharedString::from($project_file)))
    label function_path := path?(vector?(keyword?("function"), keyword?("main")))
    label build := map?()

    match display?(root.index($function_path), $Some($root), $build) {
        case Some: main_function -> display?(function($main_function, parameters, $None, $root, $build), $Some($root), $build)
        case None -> display?(error?(string?("main function not found")), $Some($root), $build)
    }
}
